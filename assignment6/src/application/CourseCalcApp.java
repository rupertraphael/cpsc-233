package application;
	
import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;

/* CourseCalcApp.java
 * 
 * This program wraps the CourseCalculator program in a JavaFX graphical
 * user interface.
 * 
 * The interface lets the user select a grade category to see the weighted grade of each
 * grade category using the provided combo box, and to update the project grade
 * using the provided text field and button. This will also update the final grade 
 * and the weighted project grade accordingly.
 * 
 */
public class CourseCalcApp extends Application {
	// instance variables
	// some JavaFX components can be instantiated on the spot, but we use
	// instance variables to hold anything we might want to refer to multiple times
	// and in different methods
	
	CourseCalculator myCalculator;
	ComboBox<String> categoryBox;
	Label categoryGradeLabel;
	Label gradeLabel;

	/* CourseCalculator
	 * Constructor for the class: DO NOT MODIFY 
	 * 
	 * You may wish to note how other methods are called to help you implement them
	 */
	
	public CourseCalcApp()
	{
		myCalculator = new CourseCalculator();
		myCalculator.calculateFinalGrade();
		
		gradeLabel = new Label();
		populateGradeLabel();
		
		categoryGradeLabel = new Label("Weighted Grade");
		
		ObservableList<String> categories = FXCollections.observableArrayList(myCalculator.getSchemeNames());
		categoryBox = new ComboBox<String>(categories);
	}
	
	/* start()
	 * @param Stage primaryStage
	 * 
	 * This sets up our GUI in preparation for being launched by the main method
	 *  
	 */
	
	@Override
	public void start(Stage primaryStage) {
		try {
				
			BorderPane root = new BorderPane();
			Scene scene = new Scene(root,400,200);
		
			// layout stuff
			FlowPane mainPane = new FlowPane();
			mainPane.setPadding(new Insets(10, 10, 10, 10));
			mainPane.setVgap(5);
			
			// build the first two rows of widgets
			mainPane.getChildren().add(this.buildCategoryRow());
			mainPane.getChildren().add(this.buildProjectRow());
			
			// gradeLabel is already instantiated and populated by the constructor
			mainPane.getChildren().add(gradeLabel);
			FlowPane.setMargin(gradeLabel, new Insets(10, 10, 10, 10));
			
			// get everything ready to show then show it			
			root.getChildren().add(mainPane);
			primaryStage.setTitle("CourseCalculator");
			primaryStage.setScene(scene);
			primaryStage.show();
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	/* HBox buildCategoryRow()
	 * @return a HBox which lays out the first row of widgets
	 * 
	 * - there should be a combo box listing all of the grade categories
	 * - there should be a label which shows the weighted grade of the
	 *   grade category selected in the combo box
	 *  
	 */
	
	public HBox buildCategoryRow()
	{
		HBox categoryRow = new HBox();
			
		// register a new event handler which uses the category selected by the
		// combo box to find the correct weighted grade using the CourseCalculator class
		// The label is then set to this grade
		
		categoryBox.setOnAction(new EventHandler<ActionEvent>()
		{
			public void handle(ActionEvent e)
			{
				String category = categoryBox.getValue();

				Double grade = new Double(myCalculator.findGrade(category));

				categoryGradeLabel.setText(grade.toString());
			}
		});

		// add our widgets to the box, lay things out and return the HBox
		
		categoryRow.getChildren().add(categoryBox);
		HBox.setMargin(categoryBox, new Insets(10,10,10,10));
		categoryRow.getChildren().add(categoryGradeLabel);
		HBox.setMargin(categoryGradeLabel, new Insets(10,10,10,10));
		
		return categoryRow;
	}
	
	/* HBox buildProjectRow()
	 * @return a HBox which lays out the second row of widgets
	 * 
	 * - there should be a text field which somebody can type in
	 * - there should be a button which allows the user to update the project grade
	 *  
	 */
	
	public HBox buildProjectRow()
	{
		// set up the widgets which aren't instance variables of the class
		
		HBox projectBox = new HBox();
		TextField gradeField = new TextField("Project Grade");
		Button updateButton = new Button("Update");
		
		// register an event handler for the button which takes the value of the
		// String generated by the text field, updates the grade, then
		// recalculates the final grade and populates the final grade on the GUI
		// using a provided class method
		
		// If something which isn't a double is entered in the field, the button
		// should do nothing
		
		// If something which isn't a valid grade (larger than 4.3 or smaller than 0.0)
		// is entered, then the application should not change any grades
		
		// if "Project" is also selected in the ComboBox, then the grade label
		// showing individual category grades should also be updated
		
		updateButton.setOnAction(new EventHandler<ActionEvent>()
		{
			public void handle(ActionEvent e)
			{
				try
				{
					double newGrade = Double.parseDouble(gradeField.getText());
					myCalculator.updateGrade("Project", 0, newGrade);
					myCalculator.calculateFinalGrade();
					populateGradeLabel();
					
					if(newGrade < 0 || newGrade > 4.3) {
						Alert badGrade = new Alert(AlertType.ERROR);
						badGrade.setTitle("Invalid grade");
						badGrade.setHeaderText("Grades must be between 0.0 and 4.3. No changes made.");
						badGrade.showAndWait();
						return;
					}
					
					if (0 == (categoryBox.getValue().compareTo("Project")))
					{
						double projectGrade = myCalculator.findGrade("Project");
						categoryGradeLabel.setText(Double.toString(projectGrade));
					}
						
				}
				catch(NumberFormatException nfe)
				{
					gradeField.setText("Project Grade");
				}
			}
		});
		
		// lay out the widgets
		
		projectBox.getChildren().add(gradeField);
		HBox.setMargin(projectBox.getChildren().get(0), new Insets(10,10,10,10));
		projectBox.getChildren().add(updateButton);
		HBox.setMargin(projectBox.getChildren().get(1), new Insets(10,10,10,10));
		
		
		return projectBox;
	}
	
	// this is a utility method which formats the final grade with some appropriate
	// text
	
	public void populateGradeLabel()
	{
		gradeLabel.setText("Final grade: " + myCalculator.getFinalGrade());
	}
	
	public static void main(String[] args) {
		launch(args);
	}
}
